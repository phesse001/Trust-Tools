{"0": {
    "doc": "Create Your Own",
    "title": "Dockerfile.txt Template",
    "content": "From RUN CMD Download ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/create_your_own_docker.html",
    "relUrl": "/Solutions/Docker/create_your_own_docker.html"
  },"1": {
    "doc": "Create Your Own",
    "title": "March Madness Simulation Dockerfile.txt",
    "content": "#(1) Pull parent image. From ubuntu:18.04 # (2) Set environment variables. ENV DEBIAN_FRONTEND=noninteractive # (3) Download software dependencies. RUN yes| apt-get update && yes| apt-get install g++ && yes | apt-get install git && yes | apt-get install texlive-latex-recommended && yes | apt-get install texlive-publishers && yes | apt-get install python3.6 # (4) Copy scripts into image COPY ./scripts/run.sh / COPY ./scripts/madness.sh / COPY ./scripts/paper.sh / COPY ./scripts/table.py / COPY ./scripts/correct.txt / COPY ./scripts/SOTF.tex / COPY ./scripts/SOTF.bib / # (5) Run entrypoint script. CMD ./run.sh Download Go Back | | . ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/create_your_own_docker.html",
    "relUrl": "/Solutions/Docker/create_your_own_docker.html"
  },"2": {
    "doc": "Create Your Own",
    "title": "Create Your Own",
    "content": "| ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/create_your_own_docker.html",
    "relUrl": "/Solutions/Docker/create_your_own_docker.html"
  },"3": {
    "doc": "Create Your Own",
    "title": "wf.yml Template",
    "content": "steps: - uses: args: './Path/To/Script' or - uses: runs: ['./Path/To/Script',''] Download ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/create_your_own_popper.html",
    "relUrl": "/Solutions/Popper/create_your_own_popper.html"
  },"4": {
    "doc": "Create Your Own",
    "title": "March Madness Simulation wf.yml",
    "content": "# (0) Start of file steps: # (1) Run March Madness Application - uses: './container' runs: './scripts/madness.sh' # (3) Create LaTeX Table with results - uses: docker://python:3 runs: ['./scripts/table.py','./scripts/correct.txt','./madness/output_no_advantage.txt', './madness/output_2_advantage.txt','./madness/output_4_advantage.txt','./docker_table.tex','12'] - uses: docker://python:3 runs: ['./scripts/table.py','./scripts/correct.txt','./madness/output_no_advantage.txt', './madness/output_2_advantage.txt','./madness/output_4_advantage.txt','./popper_table.tex','12'] # (4) Compile Latex files into pdf - uses: './container' runs: './paper.sh' # (5) Remove March Madness Application from host machine - uses: './container' args: ['rm', '-r', 'madness'] Download Go Back | | . ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/create_your_own_popper.html",
    "relUrl": "/Solutions/Popper/create_your_own_popper.html"
  },"5": {
    "doc": "Create Your Own",
    "title": "Create Your Own",
    "content": "| ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/create_your_own_popper.html",
    "relUrl": "/Solutions/Popper/create_your_own_popper.html"
  },"6": {
    "doc": "Create Your Own",
    "title": "run.sh",
    "content": "#!/bin/sh echo \"Executing run.sh\" #Get path of directory containing scripts full_path=$(realpath $0) dir_path=$(dirname $full_path) #Execute experiment and paper generating scripts. $dir_path/madness.sh $dir_path/paper.sh Download ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"7": {
    "doc": "Create Your Own",
    "title": "madness.sh",
    "content": "#!/bin/sh # File pulls March Madness simulator form GitHub and executes with three different values for homefeild advantage (0,2,4). Resutls of each run is saved in output files. echo \"Executing madness.sh\" mkdir madness cd ./madness yes| apt-get install cmake git init git pull http://github.com/wbonsu/MarchMaddness.git cmake . make ./March_Madness_Simulator 0 > output_no_advantage.txt ./March_Madness_Simulator 2 > output_2_advantage.txt ./March_Madness_Simulator 4 > output_4_advantage.txt Download ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"8": {
    "doc": "Create Your Own",
    "title": "paper.sh",
    "content": "#!/bin/sh #Compiles Latex files and produces a pdf. echo \"Executing paper.sh\" #Create table output for docker-table in Tex file python table.py correct.txt ./madness/output_no_advantage.txt ./madness/output_2_advantage.txt ./madness/output_4_advantage.txt docker_table.tex 12 #Create table output for popper-table in Tex file python table.py correct.txt ./madness/output_no_advantage.txt ./madness/output_2_advantage.txt ./madness/output_4_advantage.txt popper_table.tex 16 #Compile SOTF Latex files and generate pdf pdflatex SOTF bibtex SOTF pdflatex SOTF pdflatex SOTF Download Go Back | ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"9": {
    "doc": "Create Your Own",
    "title": "table.py",
    "content": "#!/usr/bin/python import sys #Creates table in Latex format. #6 parameters: # (1) Results (txt file) (Correct March Madness Ranking) # (2) Results (txt file) #1 # (3) Results (txt file) #2 # (4) Results (txt file) #3 # (5) Path location of latex table with results # (6) Number of teams to display. def main(): correct_data_path = sys.argv[1] file_1 = sys.argv[2] file_2 = sys.argv[3] file_3 = sys.argv[4] output_file = sys.argv[5] num_displayed_teams = int(sys.argv[6]) correct = [] file_1_array = [] file_2_array = [] file_3_array = [] with open(correct_data_path, 'r') as correct_data: for line in correct_data: correct.append(line.partition(\" \")[2].strip()) with open(file_1, 'r') as file_1: for line in file_1: file_1_array.append(line.partition(\" \")[2].strip()) with open(file_2, 'r') as file_2: for line in file_2: file_2_array.append(line.partition(\" \")[2].strip()) with open(file_3, 'r') as file_3: for line in file_3: file_3_array.append(line.partition(\" \")[2].strip()) with open(output_file, 'w') as output: output.write('\\\\begin{tabular}{ |p{2cm}||p{2cm}|p{2cm}|p{2cm}| }\\n') output.write('\\\\hline\\n') output.write('\\\\multicolumn{4}{|c|}{Docker Simulated Results} \\\\\\\\\\n') output.write('\\\\hline\\n') output.write(' 2019 Results & Home-Field Advantage 0 & Home-Field Advantage 2& Home-Field Advantage 4\\\\\\\\\\n') output.write('\\\\hline\\n') for x in range(num_displayed_teams): output.write('{} & {} & {} & {}\\\\\\\\\\n'.format(correct[x], file_1_array[x], file_2_array[x], file_3_array[x] )) output.write('\\\\hline\\n') output.write('\\\\end{tabular}\\n') main() Download ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"10": {
    "doc": "Create Your Own",
    "title": "correct.txt",
    "content": "329 Virginia 295 Texas Tech 17 Auburn 169 Michigan St 236 Purdue 75 Duke 104 Gonzaga 137 Kentucky 222 Oregon 289 Tennessee 330 Virginia Tech 153 LSU 205 North Carolina 114 Houston 92 Florida St 168 Michigan 218 Oklahoma 305 UC Irvine 328 Villanova 126 Iowa 308 UCF 142 Liberty 160 Maryland 170 Minnesota 337 Washington 133 Kansas 217 Ohio St 348 Wofford 20 Baylor 184 Murray St 32 Buffalo 89 Florida 98 Gardner Webb 171 Mississippi 346 Wisconsin 134 Kansas St 279 St Mary's CA 220 Old Dominion 47 Cincinnati 53 Colgate 186 N Dakota St 326 VCU 172 Mississippi St 278 St Louis 21 Belmont 352 Yale 149 Louisville 28 Bradley 125 Iona 320 Utah St 198 New Mexico St 209 Northeastern 127 Iowa St 102 Georgia St 261 Seton Hall 1 Abilene Chr 85 F Dickinson 285 Syracuse 158 Marquette 327 Vermont 11 Arizona St 188 N Kentucky 195 Nevada 177 Montana Download | . ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"11": {
    "doc": "Create Your Own",
    "title": "Create Your Own",
    "content": "| ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/create_your_own_script.html",
    "relUrl": "/Solutions/Script/create_your_own_script.html"
  },"12": {
    "doc": "Data",
    "title": "Data",
    "content": "Source . All of the data used in this experiment was sourced from masseyratings.com[5] . The data can be found by navigating to the data section, which will bring up a list of different sports and the years their season’s were played in. The data used in this experiment came from . After clicking on 2019, you will be redirected to a page with different options for the divisions of teams. The options used to get our data are ‘NCAA’, ‘NCAA D1’, ‘ALL’. You will finally be given options to pick how you want the data formatted. For the games, we went with ‘All’, ‘Matlab Games’. For the teams we again did ‘All’ and then ‘Matlab Teams’. Format . Games . The raw data for games is formatted as follows: Days, Date, TeamID, Field1, Score1, Team2ID, Field2, Score2. The only really ambiguous data section is ‘Field’. This simply indicates whether a team played home or away. A 1 indicates they played at home and a -1 indicates they played away. Teams . The raw data for teams is formatted as follows: TeamID, Team Name. ",
    "url": "http://localhost:4000/Trust-Tools/data.html",
    "relUrl": "/data.html"
  },"13": {
    "doc": "Home",
    "title": "Trust Tools",
    "content": "The fundamental components of trustworthy computational results are transparency, reproducibility, and replicability. Transparency: . All data and software used to produce a result are available with sufficient documentation. Reproducibility: . Results can be computed by someone else using the author’s environment. Replicablilty: . Consistent results can be obtained using another environment. ",
    "url": "http://localhost:4000/Trust-Tools/index#trust-tools",
    "relUrl": "/index#trust-tools"
  },"14": {
    "doc": "Home",
    "title": "Outline",
    "content": "In order to make our results trustworthy, this webpage attempts to cover all three points discussed above. We provide different solutions to the problem of reporducibility, each with varying degrees of success. For each solution we provide a brief overview and an outline all of the required dependencies and steps to get started. Even further, we provide generalized templates that anyone can take and modify for their own needs. We then show how these different solutions can be used by applying them to a March Madness Rating system. All of the data and source code for the March Madness Rating System are referenced as well. ",
    "url": "http://localhost:4000/Trust-Tools/index#outline",
    "relUrl": "/index#outline"
  },"15": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/Trust-Tools/index",
    "relUrl": "/index"
  },"16": {
    "doc": "Popper Solution",
    "title": "Overview",
    "content": "While Docker has many advantages over the script solution, there are still areas where it is lacking. Mainly, it lacks the inclusion of verification and validation. Verification is the process of checking that software achieves a given task without bugs. This usually boils down to static testing. Validation checks whether software fulfills given requirements by testing inputs and analyzing ouputs [1]. Popper provides a common framework for describing all dependencies and artifacts for a given experiment. An experiment is Popperized” if it contains the following [2]: . | Experimental code | Experiment orchestration code | References to data dependencies | Experiment parameters | Validation criteria and results | . Popper is very similar to Docker, but defines a workflow and enumerates the steps of running an experiment in an wf.yml file. Along with laying out the steps to run the experiment, popper can handle experimental logic with a travis.yml file containing a list of tests. The basis of Popper is the wf.yml file. Here is the general structure a wf.ym may have [3]: . steps: # download CSV file with data on global CO2 emissions - id: download uses: docker://byrnedo/alpine-curl:0.1.8 args: [-LO, https://github.com/datasets/co2-fossil-global/raw/master/global.csv] # obtain the transpose of the global CO2 emissions table - id: get-transpose uses: docker://getpopper/csvtool:2.4 args: [transpose, global.csv, -o, global_transposed.csv] . The structure of the wf.yml is just a basic list of steps. However, there are many attributes that can go into each of the different steps an experiment may have. To learn more information about Popper and the configuration options for the wf.yml file, visit Popper’s documentation page here. ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/#overview",
    "relUrl": "/Solutions/Popper/#overview"
  },"17": {
    "doc": "Popper Solution",
    "title": "Installation",
    "content": "To get started with Popper, you will first need to have Docker installed. Visit the Docker Overview Page to get docker installed. Popper provides a pip package for installation. To be sure pip will work, it is recommended to use a virtual environment. The following outlines steps for a linux system, but the same can be achieved for windows and mac. mkdir ./virtualenvs apt-get install virtualenvs source ./virtualenvs/popper/bin/activate pip install popper . To verify the installation worked, run popper scaffold. This will download an example popper workflow. You can then run this workflow with popper run -f wf.yml. ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/#installation",
    "relUrl": "/Solutions/Popper/#installation"
  },"18": {
    "doc": "Popper Solution",
    "title": "Popper Solution",
    "content": " ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Popper/",
    "relUrl": "/Solutions/Popper/"
  },"19": {
    "doc": "Script Solution",
    "title": "Overview",
    "content": "This solution uses a culmination of scripts to automate installing all the dependencies, running the experiment, and genererating an output file with the results from the experiment. The general idea is to automate all tasks involved in an experiement, making it possible to get results by running a single script. A script solution typically is just a file directory containing multiple scripts, with one script being used to orchestrate the entire experiment. Here is an example of what a script solution may look like: . ├── SOTF.bib . ├── SOTF.tex . ├── correct.txt . ├── madness.sh . ├── paper.sh . ├── run.sh . └── table.py . There are a variety of different scripts that accomplish different parts of the experiment. For example, madness.sh runs the experiment and paper.sh generates a paper with the results of the experiment. The run.sh will run both of these and use the other files in the directory as arguments. This solution suffers from potential code rot and dependency issues. This is due to all the scripts being written on a particular machine and the experiment depends on the specific versions of sofware packages, which could cause compatibility issues in the future if the packages become deprecated. The sofware packages required for a script solution are dependent on the experiment being run. To replicate the March Madness Experiment the following packages are required: . | g++ | Cmake | Installtexlive-latex-recommended | Installtexlive-publishers | Python 3.6 | . For a Debian system you can run the following commands to download these packages . apt-get update apt-get install g++ apt-get install git apt-get install cmake apt-get install texlive-latex-recommended apt-get install texlive-publishers apt-get install python3.6 . ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/#overview",
    "relUrl": "/Solutions/Script/#overview"
  },"20": {
    "doc": "Script Solution",
    "title": "Script Solution",
    "content": " ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Script/",
    "relUrl": "/Solutions/Script/"
  },"21": {
    "doc": "Docker Solution",
    "title": "Overview",
    "content": "Software containters provide a way of capturing a specific environment in an executable file system. This comes with many advantages over the script solution. You no longer have to worry about the issue of code rot, as the environment you programmed in and software packages will always be the same. Containers are also portable, allowing you to publish your experiment for others to run and build upon. Docker is the leading software used to encapsulate environment variables. Docker can be installed on Mac, Linux, and Windows with Hyper-V. Once Docker is installed an image can be created from a Dockerfile or pulled from DockerHub. An image defines your environment and can be modified to have any software packages you need and run specified scripts. To see that your image was successfully created you can run docker images to list all the images on your machine. To run an image, call docker run [OPTIONS] IMAGE [COMMAND] [ARG...]. For more information on how to use docker, visit Docker’s Documentation Page. ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/#overview",
    "relUrl": "/Solutions/Docker/#overview"
  },"22": {
    "doc": "Docker Solution",
    "title": "Installation",
    "content": ". | All information found here came from (Docker Documentation Page)[https://docs.docker.com/] [4] | . Mac . Requirements . | Mac hardware must be a 2010 or a newer model | macOS must be version 10.13 or newer | At least 4 GB of RAM | VirtualBox prior to version 4.3.30 must not be installed as it is not compatible with Docker Desktop | . Go to DockerHub and click Get Docker . Then double-click Docker.dmg to start the installation. To verify Docker installed correctly, open up a terminal and run docker version . Windows . Requirements . | Windows 10, version 2004 or higher | WSL 2 feature on Windows | 64 bit processor | 4GB system RAM | BIOS-level hardware virtualization support must be enabled in the BIOS settings | . Go to DockerHub and click Get Docker . Then double-click Docker for Windows Installer . To verify Docker installed correctly, open up a terminal and run docker version . Ubuntu . There are many more steps required to install on Ubuntu. To install on Ubuntu, visit here . ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/#installation",
    "relUrl": "/Solutions/Docker/#installation"
  },"23": {
    "doc": "Docker Solution",
    "title": "Docker Solution",
    "content": ". ",
    "url": "http://localhost:4000/Trust-Tools/Solutions/Docker/",
    "relUrl": "/Solutions/Docker/"
  },"24": {
    "doc": "March Madness Example",
    "title": "Reproducible Workflows Applied to March Madness Simulation",
    "content": "The following is a paper overviewing solutions to the problem of reproducibility. This paper also contains information on applying the script, Docker, and Popper reproducible workflows to an existing March Madness simulation. If you navigate to the table of contents at the top of the page, you will see all sections of the paper listed. The ones we are concerned with here are V, VII, and IX. Clicking on each of these will bring you to the section of the paper that talks about how we applied the given workflow to the existing project . You can also find the full paper Here on GitHub. ",
    "url": "http://localhost:4000/Trust-Tools/march_madness/#reproducible-workflows-applied-to-march-madness-simulation",
    "relUrl": "/march_madness/#reproducible-workflows-applied-to-march-madness-simulation"
  },"25": {
    "doc": "March Madness Example",
    "title": "March Madness Example",
    "content": " ",
    "url": "http://localhost:4000/Trust-Tools/march_madness/",
    "relUrl": "/march_madness/"
  },"26": {
    "doc": "References",
    "title": "References",
    "content": "[1] GeeksforGeeks. 2020. Differences Between Verification And Validation - Geeksforgeeks. [online] Available at: https://www.geeksforgeeks.org/differences-between-verification-and-validation/ [Accessed 24 June 2020]. [2] Osei-Bonsu, W., 2020. An Analysis Of The Reproducible Workflows. [online] Available at: https://github.com/betterscientificsoftware/Trust-Tools/blob/master/SOTF.pdf [Accessed 24 June 2020]. [3] Jimenez, I., 2020. Popper — Popper 2.X Documentation. [online] Popper.readthedocs.io. Available at: https://popper.readthedocs.io/en/latest/index.html [Accessed 24 June 2020]. [4] Docker Documentation, 17-Jun-2020. [Online]. Available: https://docs.docker.com/. [Accessed: 25-Jun-2020]. [5] Massey, K., 2020. Massey Ratings - Sports Computer Ratings, Scores, And Analysis. [online] Masseyratings.com. Available at: https://www.masseyratings.com/ [Accessed 29 June 2020]. ",
    "url": "http://localhost:4000/Trust-Tools/references.html",
    "relUrl": "/references.html"
  }
}
